# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    admin_email_address: '%env(resolve:ADMIN_EMAIL)%'
    admin_password: '%env(resolve:ADMIN_PASSWORD)%'
    admin_firstname: '%env(resolve:ADMIN_FIRSTNAME)%'
    admin_lastname: '%env(resolve:ADMIN_LASTNAME)%'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

#    App\DataPersister\UserDataPersister:
#        bind:
#            $dataPersister: '@api_platform.doctrine.orm.data_persister'
##             Uncomment only if autoconfiguration is disabled
#            arguments: ['@App\DataPersister\UserDataPersister.inner']
#            tags: [ 'api_platform.data_persister' ]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
#    App\Listeners\AuthenticationSuccessListener:
#        arguments: ['%lexik_jwt_authentication.token_ttl%']
#        tags:
#            - {  name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccess}
#        App\Listeners\RefreshedTokenListener:
#            arguments: ['%gesdinet_jwt_refresh_token.ttl%']
#        App\Listeners\JWTCreatedListener:
#            tags:
#                - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }